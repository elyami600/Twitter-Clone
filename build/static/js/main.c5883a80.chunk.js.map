{"version":3,"sources":["components/Header.js","components/CreateAccount.js","components/MainPage.js","components/TwitterPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","email","password","fetch","method","body","JSON","stringify","headers","then","data","json","localStorage","setItem","userId","forceUpdate","this","getItem","to","className","onSubmit","id","type","placeholder","onChange","href","React","Component","CreateAccount","username","success","Fragment","maxLength","MainPage","TwitterPage","textarea","console","log","handleCreateTweet","tweetText","newData","tweets","splice","tweet","getTweets","logout","removeItem","isAuth","getUsers","searchTerm","users","handleEnter","e","key","searchTweet","Number","onKeyDown","map","user","onClick","cols","rows","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5883a80.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport {Link, Redirect} from 'react-router-dom';\n\nclass Header extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            email: \"\",\n            password:\"\"\n\n        };\n    }\n\n    handleChange = (event) => {\n\n        this.setState({ \n            [event.target.name]: event.target.value\n        });\n\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const { email , password } = this.state;\n\n        fetch('/tweet/login', { \n            method:'post',\n            body: JSON.stringify({\n                email,\n                password\n\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n            \n\n        }).then(data => data.json())\n        .then((data) => {\n            localStorage.setItem('id', data.userId);\n            this.forceUpdate();\n        });\n\n    }\n\n\n\n\n\n\n    render() {\n        const {email, password } = this.state;\n\n        if (localStorage.getItem('id')) {\n            return <Redirect to=\"/twitterPage\"/>\n        }\n        return(\n            <div className=\"main-body\">\n    \n                <header className=\"image-bird\">Image</header>\n                <span className=\"title-form\">Log in to Twitter</span>\n    \n                <form className=\"main-form\" onSubmit={this.handleSubmit}>\n\n                    <input \n                    id=\"user-email-input\" \n                    type=\"text\"\n                     name=\"email\" \n                     placeholder=\"Username\"\n                     value={email}\n                     onChange={this.handleChange}\n                      ></input>\n                    <br/>\n                    <input \n                    id=\"user-password-input\"\n                     type=\"password\" \n                     name=\"password\" \n                     placeholder=\"Password\"\n                     value={password}\n                     onChange={this.handleChange}\n\n                     ></input>\n                    <br/>\n                    <button className=\"button-login\">\n                    Log in\n                    </button>\n    \n                </form>\n    \n                <div>\n                   <span><a href=\"#\">Forgot passwrod?  </a></span>\n                    <span> . </span>\n                   <span> <a href=\"#\"> Sign up for Twitter</a></span>\n                </div>\n            </div>\n        )\n\n    }\n    \n}\nexport default Header;\n","import React from 'react';\nimport './Header.css';\nimport { Redirect } from 'react-router-dom';\n\nclass CreateAccount extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            username:\"\",\n            email:\"\",\n            password:\"\",\n            success: false\n        };\n        \n    }\n\n    handleChange = (event) => {\n        const { name, value } = event.target;\n\n        this.setState({ \n            [name]: value\n        });\n\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const {username, email, password} = this.state;\n\n       fetch('/tweet/createUser', {\n           method: 'post',\n           body: JSON.stringify({\n                username,\n                email,\n                password\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n       })\n        .then((data) => {\n            this.setState({success: true});\n        });\n\n    }\n\n\n\n\n\n\n\n    render() {\n        const {username, email, password, success } = this.state;\n\n        if (success) {\n            return <Redirect to=\"/signin\"/>\n        }\n        return(\n            <React.Fragment>\n\n                 <div className=\"main-body\">\n    \n                <header className=\"image-bird\">Image</header>\n\n                <span className=\"title-form\">Join Twitter Today</span>\n\n                <form className=\"main-form\" onSubmit={this.handleSubmit}>\n\n                    <input \n                    id=\"user-name-input\" \n                    type=\"text\"\n                    name=\"username\" \n                    value={username} \n                    onChange={this.handleChange}></input>\n                    <br/>\n\n                    <input \n                    id=\"user-email-input\" \n                    type=\"text\" \n                    name=\"email\"\n                    value={email} \n                    onChange={this.handleChange}\n\n                    ></input>\n                    <br/>\n                \n                    <input \n                    id=\"user-password-input\" \n                    type=\"password\" \n                    name=\"password\"\n                    maxLength=\"10\" \n                    value={password } \n                    onChange={this.handleChange} ></input>\n                    <br/>\n\n                    <button className=\"button-login\">Sign up</button>\n\n                </form>\n\n                <div>\n                    <span>\n                            By signing up, you agree to our Terms , Data Policy and Cookies Policy .\n                    </span>\n                </div>\n                \n            </div>\n\n            </React.Fragment>\n           \n        )\n\n    }\n    \n}\nexport default CreateAccount;\n","import React from \"react\"\nimport './Header.css';\nimport {Link} from 'react-router-dom';\n\nclass MainPage extends React.Component{\n\n    render() {\n        return (\n            <div className=\"main-container\">\n\n                <div className=\"split left\">\n                    <div className=\"centered\">\n                    <h4>Follow your interests.</h4>\n                    <h4>Hear what people are talking about.</h4>\n                    <h4>Join the conversation.</h4>\n\n                    </div>\n                    \n                </div>\n\n                <div className=\"split right\">\n                    <div className=\"centered\">\n                        <h1>See what’s happening in the world right now</h1>\n                        <h4>Join Twitter today.</h4>\n                        <nav>\n                            <button className=\"button-singUp\">\n                                <Link to=\"/signup\">Sign up</Link>\n                            </button>\n                            <br/>\n                            <button className=\"button-logIn\">\n                            <Link to=\"/signin\">Log in</Link>\n                            </button>\n                        </nav>\n\n                    </div>\n                    \n\n                </div>\n                \n                \n\n            </div>\n        )\n    }\n}\nexport default MainPage; \n","import React from 'react';\nimport './TwiterPage.css'\nimport {Link, Redirect} from 'react-router-dom';\nimport { KEYS } from 'eslint-visitor-keys';\n\nclass TwitterPage extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            id: null,\n            tweets:[],\n            users:[],\n            searchTerm: \"\",\n            tweetText:\"\",\n            searchTweet:\"\",\n            isAuth: true\n        }\n    }\n\n    componentDidMount() {\n        let id = localStorage.getItem('id');\n        if (!id) {\n            this.setState({\n                isAuth: false\n            })\n            return;\n        } else {\n            id = Number(id);\n            this.setState({id});\n        }\n\n        this.getTweets(id);\n    }\n\n    handleChange = (event) => {\n        const { name, value } = event.target;\n\n        this.setState({ \n            [name]: value\n        });\n\n    }\n\n    handleSubmit = (event) => {\n     event.preventDefault();\n\n     const { textarea } = this.state;\n\n     fetch('/tweet/validation', {\n         method:'post',\n         body:JSON.stringify({\n             id: textarea\n\n         }),\n         headers: {\n             'Content-type': 'application/json'\n         }\n\n     }).then(data => data.json())\n     .then((data) => {\n         console.log(data);\n     });\n   \n    }\n\n    handleCreateTweet = (event) => {\n        event.preventDefault();\n        \n        const { id, tweetText } = this.state;\n        fetch('/tweet/createTweet', {\n            method:'post',\n            body:JSON.stringify({\n                userId: id,\n                tweetText\n\n            }),\n            headers: {\n                 'Content-Type': 'application/json'\n            }\n           \n\n        })\n        .then((data) => data.json())\n        .then(newData => {\n            const tweets = this.state.tweets;\n            tweets.splice(0, 0, newData.tweet);\n\n            this.setState({\n                tweets,\n                tweetText: ''\n            });\n        })\n        \n     \n    }\n\n    getTweets = (id) => {\n\n        fetch(`/tweet/tweets/${id}` , {\n            method:'get'\n        }).then(data => data.json())\n        .then((data) => {\n            const tweets = data.tweets;\n            this.setState({tweets});\n        });\n     \n\n    }\n\n    logout = () => {\n        localStorage.removeItem('id');\n\n        this.setState({\n            isAuth: false\n        });\n    }\n\n    getUsers = (searchTerm ) => {\n       \n        fetch(`/tweet/users/${searchTerm}`, {\n            method:'get'\n        }).then(data => data.json())\n        .then((data) => {\n            const users = data.users\n            this.setState({users, searchTerm: ''});\n            console.log(users);\n        })\n    }\n\n    handleEnter = (e) => {\n        if (e.key === 'Enter') {\n            const{ searchTerm } = this.state;\n            this.getUsers(searchTerm)\n            //console.log('search for', this.state.searchTerm);\n        }\n    }\n\n\n\n    render() {\n        const {tweetText, searchTerm, isAuth , tweets, users} = this.state;\n\n\n        if (!isAuth) {\n            return <Redirect to=\"/\"/>\n        }\n\n        return(\n            <div>\n               \n\n              \n\n\n            <div className=\"display-search-user\">\n                <div className=\"search-container\">\n                    <input\n                        className=\"search-tweeter\" \n                        type=\"text\" \n                        name=\"searchTerm\"\n                        placeholder=\"Search\"\n                        value={searchTerm}\n                        onChange={this.handleChange}\n                        onKeyDown={this.handleEnter}\n                    ></input>\n                    <div className=\"search-results\">\n                        {users.map(user => (\n                            <div className=\"search-user\" key={user.id}>{user.username}</div>\n                        ))}\n                    </div>\n                </div>\n               \n        \n                <button className=\"button-logout\" onClick={this.logout}>\n                    Log out\n                </button>\n            </div>\n\n\n              \n             <div className=\"main-tweet\">   \n                <form className=\"tweet-form\" onSubmit={this.handleCreateTweet}>\n\n                    \n                    <textarea \n                    id=\"twitte-text-area\" \n                    name=\"tweetText\" \n                    placeholder=\"What's happening?\"\n                    cols={80} rows={8} \n                    value={tweetText}\n                    onChange={this.handleChange} ></textarea>\n\n                    <br/>\n\n                    <button className=\"button-tweet\">Tweet</button>\n\n                </form>\n          \n\n                <div className=\"post--your-tweet\">\n                    {tweets.map(tweet => (\n                        <div  className=\"post--your-tweet\" key={tweet.id}>\n                            <span className=\"tweet-username\">{tweet.username}</span>\n                            <div className=\"tweet-tweet\">{tweet.tweet}</div>\n                            \n                        </div>\n                    ))}\n                </div>\n    \n            </div>\n\n            </div>\n            \n        )\n\n    }\n    \n}\nexport default TwitterPage;\n// {tweets.map(tweet => (<div>{tweet.tweet}</div>))}","import React from 'react';\nimport './App.css';\n\nimport {Route} from 'react-router-dom';\n\nimport Header from './components/Header'\n\nimport CreateAccount from './components/CreateAccount'\n\nimport MainPage from './components/MainPage'\n\n\nimport TwitterPage from './components/TwitterPage'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      \n    }\n    \n  }\n\n  \n \n  render() {\n    return (\n      <div >\n        <Route path=\"/\" exact component={MainPage}/>\n        <Route path=\"/signup\" component={CreateAccount}/>         \n        <Route path=\"/signin\" component={Header}/>\n        <Route path=\"/twitterPage\" component={TwitterPage}/>\n      </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}